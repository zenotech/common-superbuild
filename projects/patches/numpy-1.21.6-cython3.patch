diff -u -Nr -U5 numpy-1.21.6/numpy/random/_common.pxd numpy-1.21.6.cython3/numpy/random/_common.pxd
--- numpy-1.21.6/numpy/random/_common.pxd	2022-04-11 12:54:40.000000000 -0400
+++ numpy-1.21.6.cython3/numpy/random/_common.pxd	2024-01-16 14:13:37.856165082 -0500
@@ -37,36 +37,36 @@
     cdef void *PyArray_realloc_aligned(void *p, size_t n)
     cdef void *PyArray_malloc_aligned(size_t n)
     cdef void *PyArray_calloc_aligned(size_t n, size_t s)
     cdef void PyArray_free_aligned(void *p)
 
-ctypedef void (*random_double_fill)(bitgen_t *state, np.npy_intp count, double* out) nogil
-ctypedef double (*random_double_0)(void *state) nogil
-ctypedef double (*random_double_1)(void *state, double a) nogil
-ctypedef double (*random_double_2)(void *state, double a, double b) nogil
-ctypedef double (*random_double_3)(void *state, double a, double b, double c) nogil
-
-ctypedef double (*random_float_fill)(bitgen_t *state, np.npy_intp count, float* out) nogil
-ctypedef float (*random_float_0)(bitgen_t *state) nogil
-ctypedef float (*random_float_1)(bitgen_t *state, float a) nogil
-
-ctypedef int64_t (*random_uint_0)(void *state) nogil
-ctypedef int64_t (*random_uint_d)(void *state, double a) nogil
-ctypedef int64_t (*random_uint_dd)(void *state, double a, double b) nogil
-ctypedef int64_t (*random_uint_di)(void *state, double a, uint64_t b) nogil
-ctypedef int64_t (*random_uint_i)(void *state, int64_t a) nogil
-ctypedef int64_t (*random_uint_iii)(void *state, int64_t a, int64_t b, int64_t c) nogil
-
-ctypedef uint32_t (*random_uint_0_32)(bitgen_t *state) nogil
-ctypedef uint32_t (*random_uint_1_i_32)(bitgen_t *state, uint32_t a) nogil
+ctypedef void (*random_double_fill)(bitgen_t *state, np.npy_intp count, double* out) noexcept nogil
+ctypedef double (*random_double_0)(void *state) noexcept nogil
+ctypedef double (*random_double_1)(void *state, double a) noexcept nogil
+ctypedef double (*random_double_2)(void *state, double a, double b) noexcept nogil
+ctypedef double (*random_double_3)(void *state, double a, double b, double c) noexcept nogil
+
+ctypedef double (*random_float_fill)(bitgen_t *state, np.npy_intp count, float* out) noexcept nogil
+ctypedef float (*random_float_0)(bitgen_t *state) noexcept nogil
+ctypedef float (*random_float_1)(bitgen_t *state, float a) noexcept nogil
+
+ctypedef int64_t (*random_uint_0)(void *state) noexcept nogil
+ctypedef int64_t (*random_uint_d)(void *state, double a) noexcept nogil
+ctypedef int64_t (*random_uint_dd)(void *state, double a, double b) noexcept nogil
+ctypedef int64_t (*random_uint_di)(void *state, double a, uint64_t b) noexcept nogil
+ctypedef int64_t (*random_uint_i)(void *state, int64_t a) noexcept nogil
+ctypedef int64_t (*random_uint_iii)(void *state, int64_t a, int64_t b, int64_t c) noexcept nogil
+
+ctypedef uint32_t (*random_uint_0_32)(bitgen_t *state) noexcept nogil
+ctypedef uint32_t (*random_uint_1_i_32)(bitgen_t *state, uint32_t a) noexcept nogil
 
-ctypedef int32_t (*random_int_2_i_32)(bitgen_t *state, int32_t a, int32_t b) nogil
-ctypedef int64_t (*random_int_2_i)(bitgen_t *state, int64_t a, int64_t b) nogil
+ctypedef int32_t (*random_int_2_i_32)(bitgen_t *state, int32_t a, int32_t b) noexcept nogil
+ctypedef int64_t (*random_int_2_i)(bitgen_t *state, int64_t a, int64_t b) noexcept  nogil
 
-cdef double kahan_sum(double *darr, np.npy_intp n)
+cdef double kahan_sum(double *darr, np.npy_intp n) noexcept
 
-cdef inline double uint64_to_double(uint64_t rnd) nogil:
+cdef inline double uint64_to_double(uint64_t rnd) noexcept nogil:
     return (rnd >> 11) * (1.0 / 9007199254740992.0)
 
 cdef object double_fill(void *func, bitgen_t *state, object size, object lock, object out)
 
 cdef object float_fill(void *func, bitgen_t *state, object size, object lock, object out)
diff -u -Nr -U5 numpy-1.21.6/numpy/random/_common.pyx numpy-1.21.6.cython3/numpy/random/_common.pyx
--- numpy-1.21.6/numpy/random/_common.pyx	2022-04-11 14:21:00.000000000 -0400
+++ numpy-1.21.6.cython3/numpy/random/_common.pyx	2024-01-16 14:13:51.234172563 -0500
@@ -168,11 +168,11 @@
                                     ctypes.CFUNCTYPE(ctypes.c_double,
                                                      ctypes.c_void_p)),
                         ctypes.c_void_p(<uintptr_t>bitgen))
     return _ctypes
 
-cdef double kahan_sum(double *darr, np.npy_intp n):
+cdef double kahan_sum(double *darr, np.npy_intp n) noexcept:
     cdef double c, y, t, sum
     cdef np.npy_intp i
     sum = darr[0]
     c = 0.0
     for i in range(1, n):
diff -u -Nr -U5 numpy-1.21.6/numpy/random/_mt19937.pyx numpy-1.21.6.cython3/numpy/random/_mt19937.pyx
--- numpy-1.21.6/numpy/random/_mt19937.pyx	2022-04-11 12:54:40.000000000 -0400
+++ numpy-1.21.6.cython3/numpy/random/_mt19937.pyx	2024-01-16 14:12:30.438127378 -0500
@@ -26,20 +26,20 @@
     void mt19937_jump(mt19937_state *state)
 
     enum:
         RK_STATE_LEN
 
-cdef uint64_t mt19937_uint64(void *st) nogil:
+cdef uint64_t mt19937_uint64(void *st) noexcept nogil:
     return mt19937_next64(<mt19937_state *> st)
 
-cdef uint32_t mt19937_uint32(void *st) nogil:
+cdef uint32_t mt19937_uint32(void *st) noexcept nogil:
     return mt19937_next32(<mt19937_state *> st)
 
-cdef double mt19937_double(void *st) nogil:
+cdef double mt19937_double(void *st) noexcept nogil:
     return mt19937_next_double(<mt19937_state *> st)
 
-cdef uint64_t mt19937_raw(void *st) nogil:
+cdef uint64_t mt19937_raw(void *st) noexcept nogil:
     return <uint64_t>mt19937_next32(<mt19937_state *> st)
 
 cdef class MT19937(BitGenerator):
     """
     MT19937(seed=None)
diff -u -Nr -U5 numpy-1.21.6/numpy/random/_pcg64.pyx numpy-1.21.6.cython3/numpy/random/_pcg64.pyx
--- numpy-1.21.6/numpy/random/_pcg64.pyx	2022-04-11 14:21:00.000000000 -0400
+++ numpy-1.21.6.cython3/numpy/random/_pcg64.pyx	2024-01-16 14:12:30.438127378 -0500
@@ -16,38 +16,38 @@
         int has_uint32
         uint32_t uinteger
 
     ctypedef s_pcg64_state pcg64_state
 
-    uint64_t pcg64_next64(pcg64_state *state)  nogil
-    uint32_t pcg64_next32(pcg64_state *state)  nogil
-    void pcg64_jump(pcg64_state *state)
-    void pcg64_advance(pcg64_state *state, uint64_t *step)
-    void pcg64_set_seed(pcg64_state *state, uint64_t *seed, uint64_t *inc)
-    void pcg64_get_state(pcg64_state *state, uint64_t *state_arr, int *has_uint32, uint32_t *uinteger)
-    void pcg64_set_state(pcg64_state *state, uint64_t *state_arr, int has_uint32, uint32_t uinteger)
+    uint64_t pcg64_next64(pcg64_state *state)  noexcept nogil
+    uint32_t pcg64_next32(pcg64_state *state)  noexcept nogil
+    void pcg64_jump(pcg64_state *state)  noexcept
+    void pcg64_advance(pcg64_state *state, uint64_t *step)  noexcept
+    void pcg64_set_seed(pcg64_state *state, uint64_t *seed, uint64_t *inc)  noexcept
+    void pcg64_get_state(pcg64_state *state, uint64_t *state_arr, int *has_uint32, uint32_t *uinteger)  noexcept
+    void pcg64_set_state(pcg64_state *state, uint64_t *state_arr, int has_uint32, uint32_t uinteger)  noexcept
 
     uint64_t pcg64_cm_next64(pcg64_state *state)  nogil
     uint32_t pcg64_cm_next32(pcg64_state *state)  nogil
     void pcg64_cm_advance(pcg64_state *state, uint64_t *step)
 
-cdef uint64_t pcg64_uint64(void* st) nogil:
+cdef uint64_t pcg64_uint64(void* st) noexcept nogil:
     return pcg64_next64(<pcg64_state *>st)
 
-cdef uint32_t pcg64_uint32(void *st) nogil:
+cdef uint32_t pcg64_uint32(void *st) noexcept nogil:
     return pcg64_next32(<pcg64_state *> st)
 
-cdef double pcg64_double(void* st) nogil:
+cdef double pcg64_double(void* st) noexcept nogil:
     return uint64_to_double(pcg64_next64(<pcg64_state *>st))
 
-cdef uint64_t pcg64_cm_uint64(void* st) nogil:
+cdef uint64_t pcg64_cm_uint64(void* st) noexcept nogil:
     return pcg64_cm_next64(<pcg64_state *>st)
 
-cdef uint32_t pcg64_cm_uint32(void *st) nogil:
+cdef uint32_t pcg64_cm_uint32(void *st) noexcept nogil:
     return pcg64_cm_next32(<pcg64_state *> st)
 
-cdef double pcg64_cm_double(void* st) nogil:
+cdef double pcg64_cm_double(void* st) noexcept nogil:
     return uint64_to_double(pcg64_cm_next64(<pcg64_state *>st))
 
 cdef class PCG64(BitGenerator):
     """
     PCG64(seed=None)
diff -u -Nr -U5 numpy-1.21.6/numpy/random/_philox.pyx numpy-1.21.6.cython3/numpy/random/_philox.pyx
--- numpy-1.21.6/numpy/random/_philox.pyx	2021-11-03 12:18:02.000000000 -0400
+++ numpy-1.21.6.cython3/numpy/random/_philox.pyx	2024-01-16 14:12:30.439127378 -0500
@@ -34,23 +34,23 @@
         int has_uint32
         uint32_t uinteger
 
     ctypedef s_philox_state philox_state
 
-    uint64_t philox_next64(philox_state *state)  nogil
-    uint32_t philox_next32(philox_state *state)  nogil
-    void philox_jump(philox_state *state)
-    void philox_advance(uint64_t *step, philox_state *state)
+    uint64_t philox_next64(philox_state *state)  noexcept nogil
+    uint32_t philox_next32(philox_state *state)  noexcept nogil
+    void philox_jump(philox_state *state)  noexcept
+    void philox_advance(uint64_t *step, philox_state *state)  noexcept
 
 
-cdef uint64_t philox_uint64(void*st) nogil:
+cdef uint64_t philox_uint64(void*st) noexcept nogil:
     return philox_next64(<philox_state *> st)
 
-cdef uint32_t philox_uint32(void *st) nogil:
+cdef uint32_t philox_uint32(void *st) noexcept nogil:
     return philox_next32(<philox_state *> st)
 
-cdef double philox_double(void*st) nogil:
+cdef double philox_double(void*st) noexcept nogil:
     return uint64_to_double(philox_next64(<philox_state *> st))
 
 cdef class Philox(BitGenerator):
     """
     Philox(seed=None, counter=None, key=None)
diff -u -Nr -U5 numpy-1.21.6/numpy/random/_sfc64.pyx numpy-1.21.6.cython3/numpy/random/_sfc64.pyx
--- numpy-1.21.6/numpy/random/_sfc64.pyx	2021-11-03 12:18:02.000000000 -0400
+++ numpy-1.21.6.cython3/numpy/random/_sfc64.pyx	2024-01-16 14:12:30.439127378 -0500
@@ -19,17 +19,17 @@
     void sfc64_set_seed(sfc64_state *state, uint64_t *seed)
     void sfc64_get_state(sfc64_state *state, uint64_t *state_arr, int *has_uint32, uint32_t *uinteger)
     void sfc64_set_state(sfc64_state *state, uint64_t *state_arr, int has_uint32, uint32_t uinteger)
 
 
-cdef uint64_t sfc64_uint64(void* st) nogil:
+cdef uint64_t sfc64_uint64(void* st) noexcept nogil:
     return sfc64_next64(<sfc64_state *>st)
 
-cdef uint32_t sfc64_uint32(void *st) nogil:
+cdef uint32_t sfc64_uint32(void *st) noexcept nogil:
     return sfc64_next32(<sfc64_state *> st)
 
-cdef double sfc64_double(void* st) nogil:
+cdef double sfc64_double(void* st) noexcept nogil:
     return uint64_to_double(sfc64_next64(<sfc64_state *>st))
 
 
 cdef class SFC64(BitGenerator):
     """
